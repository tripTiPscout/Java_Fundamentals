package Fundamentals;

import java.util.Arrays;
import java.util.Scanner;

public class ArrayManipulator {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int[] numbers = Arrays.stream(scanner.nextLine().split("\\s+")).mapToInt(Integer::parseInt).toArray();

        String input = scanner.nextLine();

        numbers = readOperations(scanner, numbers, input);

        System.out.println(Arrays.toString(numbers));
    }

    private static int[] readOperations(Scanner scanner, int[] numbers, String input) {
        while (!input.equals("end")) {
            String[] commands = input.split("\\s+");
            
            String commandA = commands[0];
            String commandB = commands[1];
            String commandC = commands[2];
            
            switch (commandA) {
                case "exchange":
                    numbers = getExchangedArray(numbers, Integer.parseInt(commandB));
                    break;
                case "max":
                    if (commandB.equals("even")) {
                        printMaxEvenIndex(numbers);
                    } else if (commandB.equals("odd")) {
                        printMaxOddIndex(numbers);
                    }
                    break;
                case "min":
                    if (commandB.equals("even")) {
                        printMinEvenIndex(numbers);
                    } else if (commandB.equals("odd")) {
                        printMinOddIndex(numbers);
                    }
                    break;
                case "first":
                    int countFirst = Integer.parseInt(commandB);
                    if (commandC.equals("even")) {
                        printFirstEvenElements(numbers, countFirst);
                    } else if (commandC.equals("odd")) {
                        printFirstOddElements(numbers, countFirst);
                    }
                    break;
                case "last":
                    int countLast = Integer.parseInt(commandB);
                    if (commandC.equals("even")) {
                        printLastEvenElements(numbers, countLast);
                    } else if (commandC.equals("odd")) {
                        printLastOddElements(numbers, countLast);
                    }
                    break;
            }
            input = scanner.nextLine();
        }
        return numbers;
    }

    private static int[] getExchangedArray(int[] numbers, int index) {
        int[] exchangedArray = new int[numbers.length];
        int counter = 0;

        if (index < 0 || index >= numbers.length) {
            System.out.println("Invalid index");
        } else {
            for (int i = index + 1; i < numbers.length ; i++) {
                exchangedArray[counter++] = numbers[i];
            }
            for (int i = 0; i <= index ; i++) {
                exchangedArray[counter++] = numbers[i];
            }
            numbers = exchangedArray;
        }
        return numbers;
    }

    private static void printMaxEvenIndex(int[] numbers) {
        int maxEven = Integer.MIN_VALUE;
        int currentIndex = -1;

        for (int i = 0; i < numbers.length ; i++) {
            if (numbers[i] % 2 == 0 && numbers[i] >= maxEven) {
                maxEven = numbers[i];
                currentIndex = i;
            }
        }
        if (currentIndex == -1) {
            System.out.println("No matches");
        } else {
            System.out.println(currentIndex);
        }
    }

    private static void printMaxOddIndex(int[] numbers) {
        int maxOdd = Integer.MIN_VALUE;
        int currentIndex = -1;

        for (int i = 0; i < numbers.length ; i++) {
            if (numbers[i] % 2 != 0 && numbers[i] >= maxOdd) {
                maxOdd = numbers[i];
                currentIndex = i;
            }
        }

        if (currentIndex == -1) {
            System.out.println("No matches");
        } else {
            System.out.println(currentIndex);
        }
    }

    private static void printMinEvenIndex(int[] numbers) {
        int minEven = Integer.MAX_VALUE;
        int currentIndex = -1;

        for (int i = 0; i < numbers.length ; i++) {
            if (numbers[i] % 2 == 0 && numbers[i] <= minEven) {
                minEven = numbers[i];
                currentIndex = i;
            }
        }

        if (currentIndex == -1) {
            System.out.println("No matches");
        } else {
            System.out.println(currentIndex);
        }
    }

    private static void printMinOddIndex(int[] numbers) {
        int minOdd = Integer.MAX_VALUE;
        int currentIndex = -1;

        for (int i = 0; i < numbers.length ; i++) {
            if (numbers[i] % 2 != 0 && numbers[i] <= minOdd) {
                minOdd = numbers[i];
                currentIndex = i;
            }
        }

        if (currentIndex == -1) {
            System.out.println("No matches");
        } else {
            System.out.println(currentIndex);
        }
    }

    private static void printFirstEvenElements(int[] numbers, int count) {
        if (count < 0 || count > numbers.length) {
            System.out.println("Invalid count");
            return;
        }

        int index = 0;
        int[] result = new int[numbers.length];

        for (int number : numbers) {
            if (number % 2 == 0) {
                result[index++] = number;
                if (index == count) {
                    break;
                }
            }
        }

        if (index == 0) {
            System.out.println("[]");
        } else {
            StringBuilder output = new StringBuilder("[");
            for (int i = 0; i < index ; i++) {
                if (i < index - 1) {
                    output.append(result[i]).append(", ");
                } else {
                    output.append(result[i]).append("]");
                }
            }
            System.out.println(output);
        }
    }

    private static void printFirstOddElements(int[] numbers, int count) {
        if (count < 0 || count > numbers.length) {
            System.out.println("Invalid count");
            return;
        }

        int index = 0;
        int[] result = new int[numbers.length];

        for (int number : numbers) {
            if (number % 2 != 0) {
                result[index++] = number;
                if (index == count) {
                    break;
                }
            }
        }

        if (index == 0) {
            System.out.println("[]");
        } else {
            StringBuilder output = new StringBuilder("[");
            for (int i = 0; i < index ; i++) {
                if (i < index - 1) {
                    output.append(result[i]).append(", ");
                } else {
                    output.append(result[i]).append("]");
                }
            }
            System.out.println(output);
        }
    }

    private static void printLastEvenElements(int[] numbers, int count) {
        if (count < 0 || count > numbers.length) {
            System.out.println("Invalid count");
            return;
        }

        int counter = 0;
        int[] firstEvenElements = new int[numbers.length];

        for (int number : numbers) {
            if (number % 2 == 0) {
                firstEvenElements[counter++] = number;
            }
        }

        if (counter == 0) {
            System.out.println("[]");
        } else {
            int startIndex = counter - count;
            if (startIndex < 0) {
                startIndex = 0;
            }
            StringBuilder output = new StringBuilder("[");
            for (int i = startIndex; i < counter ; i++) {
                if (i < counter - 1) {
                    output.append(firstEvenElements[i]).append(", ");
                } else {
                    output.append(firstEvenElements[i]).append("]");
                }
            }
            System.out.println(output);
        }
    }

    private static void printLastOddElements(int[] numbers, int count) {
        if (count < 0 || count > numbers.length) {
            System.out.println("Invalid count");
            return;
        }

        int counter = 0;
        int[] firstOddElements = new int[numbers.length];

        for (int number : numbers) {
            if (number % 2 != 0) {
                firstOddElements[counter++] = number;
            }
        }

        if (counter == 0) {
            System.out.println("[]");
        } else {
            int startIndex = counter - count;
            if (startIndex < 0) {
                startIndex = 0;
            }
            StringBuilder output = new StringBuilder("[");
            for (int i = startIndex; i < counter ; i++) {
                if (i < counter - 1) {
                    output.append(firstOddElements[i]).append(", ");
                } else {
                    output.append(firstOddElements[i]).append("]");
                }
            }
            System.out.println(output);
        }
    }
    
}
